1. Singleton 디자인패턴
구조 : 정적 인스턴스를 통해 전역에서 접근할 수 있도록 하는 구조
사용 이유 : 모든 곳에서 접근해야 하거나, 하나뿐인 데이터를 관리하기 위해 사용

2. Object Pool 디자인패턴
구조 : 오브젝트를 자료구조에 저장하여 외부로 반환하거나 받아오는 구조
사용 이유 : 데이터의 메모리 할당, 삭제 과정에서의 메모리 낭비를 방지하기 위해 사용

3. Bridge 디자인패턴
구조 : 추상층 클래스와 구현체 클래스를 분리하여 추상층 클래스를 통해서 구현체 클래스의 내용을 실행하는 구조. 원하는 구현체 클래스를 선택하여 실행 가능
사용 이유 : 새로운 구현 내용이 추가될 때에 부가적인 작업이 필요하지 않도록 하기 위해서 사용

4. Composite 디자인패턴
구조 : 그룹과 객체를 동일화하여 객체에서 기능을 구현하고, 그룹에서는 보유 객체들의 기능을 실행하도록 하는 구조
사용 이유 : 여러 객체에게 공통적인 기능을 각각 실행하는 불편함 때문에 그룹에 담아놓고 한번에 실행할 수 있도록 하기 위해서 사용

5. Visitor 디자인패턴
구조 : 요소 클래스와 해당 요소 클래스를 참조하는 Visitor 클래스를 만들어 Visitor 클래스를 통해 요소 클래스에 접근하도록 하는 구조
사용 이유 : 요소 클래스의 내용을 변경할 수 없는 경우 등에 Visitor 클래스를 통해 요소 클래스의 기능을 구현하고 실행하기 위해서 사용

6. 